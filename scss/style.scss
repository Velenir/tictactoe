*, *::before, *::after {
	box-sizing: border-box;
}

button {
	cursor: pointer;
	outline: none;

	&::-moz-focus-inner {
		border: none;
	}
}

// $text-color: #655330;
$body-color: #cedfef;
$notification-color: white;
$symbol-color: #475ba2;
$cell-color: $notification-color;
$cell-inner-shadow: inset 0 0 3px gray;
$cell-outer-shadow: 1px 1px 5px gray;
$cell-size: 100px;
$cell-margin: 5px;

html {
	font-size: 16px;
}

body {
	min-height: 100vh;
	margin: 0;
	background-color: $body-color;
	display: flex;
	flex-direction: column;
}

main {
	min-height: inherit;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	position: relative;
	overflow: hidden;
}

div, span {
	outline: 1px dotted black;
}

.board {
	background-color: rgba(116, 162, 116, 0.12);
	min-width: 3 * ($cell-size + 2 * $cell-margin);
	perspective: 200px;
	transition: 0.5s opacity;

	&.spin .cell {
		animation: 6s infinite alternate spin;
	}
	&.fall {
		pointer-events: none;
		.cell {
			animation: 6s ease-out forwards fall;
		}
	}

	&.arrive {
		pointer-events: none;
		.cell {
			animation: 1s forwards arrive;
			opacity: 0;
		}
	}


	// &:hover .cell {
	// 	transform: scale(1.1);
	// 	transform: perspective(200px) rotateY(15deg);
	// }
}

.notification {
	position: absolute;
	top: 100px;
	left: 50%;
	width: 200px;
	transform: translateX(-50%);
	background-color: $notification-color;
	border: 1px solid gray;
	box-shadow: inset 0 0 3px gray, 0 8px 5px -3px gray;
	// transition: 0.7s cubic-bezier(0.49, 1.16, 0.84, 1.35) top;
	z-index: 2;
	text-align: center;

	&.hidden {
		top: -200px;
	}

	&.inbound {
		animation: 0.5s cubic-bezier(0.49, 1.16, 0.84, 1.35) inbound;
	}

	&.outbound {
		animation: 0.4s linear forwards outbound;
	}

	&.X > svg, &.O > svg, use {
		pointer-events: none;
	}

	> .tie {
		display: none;
	}

	&.X {
		> .O {
			display: none;
		}
	}

	&.O {
		> .X {
			display: none;
		}
	}

	&.tie {
		> .O, > .X {
			display: none;
		}
		> .tie {
			display: unset;
		}
	}

	&.tie, &.X, &.O, &.selection {
		+ .board {
			opacity: 0.5;
		}
	}

	> svg {
		stroke: $symbol-color;
		stroke-width: 7;
		width: 50%;
		height: 100px;

		&.X, &.O {
			cursor: pointer;
		}

		&.O, &.tie {
			padding: 6px;
		}

		&.X:hover, &.O:hover {
			stroke-width: 7.7;
			background-color: rgba(0, 0, 0, 0.04);
		}

		&.tie {
			stroke-width: 3;
			color: $symbol-color;
		}
	}

	> .txt {
		font-family: monospace;
		text-transform: uppercase;
		margin-top: 0;
	}

}

$arrive-delay: 0.1s;
$fall-delay: 0.5s;

.cell {
	width: $cell-size;
	height: $cell-size;
	float: left;
	margin: $cell-margin;
	background-color: $cell-color;
	transition: 1s transform, 1s box-shadow;
	position: relative;
	transform-style: preserve-3d;
	box-shadow: $cell-inner-shadow, $cell-outer-shadow;

	// animation: 1s cubic-bezier(0.68, -0.55, 0.27, 1.55) scaleBounce;
	// animation: 1s arrive;

	> svg {
		stroke: $symbol-color;
		stroke-width: 7;
		width: 100%;
		height: 100%;
		backface-visibility: hidden;
		animation: 1.2s linear draw;
	}

	&:nth-child(3n + 4) {
		clear: left;
	}

	&:active {
		transform: none !important;
		box-shadow: $cell-inner-shadow, $cell-outer-shadow !important;
	}

	@for $i from 1 through 9 {
		&:hover:nth-child(#{$i}) {
			@if $i == 5 {
				transform: scale(1.05);
			} @else {
				$x: if($i <= 3, 1, if($i >= 7, -1, 0));
				$y: if(($i+3) % 3 == 1, -1, if(($i+3) % 3 == 2, 0, 1));
				transform: rotate3d($x, $y, 0, 10deg);
			}

			@if $i <=3 {
				box-shadow: $cell-inner-shadow, 1px 10px 5px -5px gray;
			} @else if $i == 4 {
				box-shadow: $cell-inner-shadow, 10px 1px 5px -5px gray;
			} @else if $i == 5 {
				box-shadow: $cell-inner-shadow;
			} @else if $i == 6 {
				box-shadow: $cell-inner-shadow, -10px 1px 5px -5px gray;
			} @else if $i >= 7 {
				box-shadow: $cell-inner-shadow, 1px -10px 5px -5px gray;
			}
		}

		&:nth-child(#{$i}) {
			// animation-delay: floor(($i - 1) / 3) * 0.5s;

			.arrive & {
				animation-delay: (9 - $i) * $arrive-delay + if($i==4 or $i==6, ($i - 5) *2 * $arrive-delay, 0);
			}

			.fall & {
				animation-delay: ($i - 1) * $fall-delay;
			}
		}
	}

	// .arrive &:nth-child(1), .arrive &:nth-child(4) {
	// 	animation-delay: 1.2s;
	// }
	//
	// .arrive &:nth-child(2), .arrive &:nth-child(3), .arrive &:nth-child(6), .arrive &:nth-child(9) {
	// 	animation-delay: 2.4s;
	// }
}

@keyframes spin {
	5% {
		transform: rotate3d(1, 1, 0, 20deg);
	}
	10% {
		transform: rotate3d(1, 0, 0, 30deg);
	}
	15% {
		transform: rotate3d(1, 0, 1, 20deg);
	}
	20% {
		transform: rotate3d(1, -1, 1, 10deg);
	}
	25% {
		transform: rotate3d(0, -1, 0, 20deg);
	}
	30% {
		transform: rotate3d(0, 1, 1, 30deg);
	}
	35% {
		transform: rotate3d(0, 0, 0, 30deg);
	}
	40% {
		transform: rotate3d(1, -1, 1, 20deg);
	}
	45% {
		transform: rotate3d(1, 0, 0, 30deg);
	}
	50% {
		transform: rotate3d(0, -1, 1, 30deg);
	}
	60% {
		transform: rotateY(0) rotateX(0);
	}
	100% {
		transform: rotateY(180deg) rotateX(180deg);
	}
}

@keyframes fall {
	@for $i from 0 through 9 {
		#{$i}% {
			top: 3px - random(5);
			left: 3px - random(5);
		}
	}
	10% {
		top: 0;
		left: 0;
		transform: rotateY(0) rotateX(0) scale(1);
		box-shadow: $cell-inner-shadow, $cell-outer-shadow;
	}
	20% {
		top: -50px;
		left: 0;
		opacity: 1;
		box-shadow: $cell-inner-shadow;
	}
	@for $i from 3 through 9 {
		#{$i*10}% {
			left: 25px - random(50);
		}
	}
	100% {
		top: 300px;
		transform: rotateY(400deg) rotateX(200deg) scale(0.7);
		opacity: 0;
	}
}

@keyframes draw {
	from {
		stroke-dasharray: 220;
		stroke-dashoffset: 220;
	}
	to {
		stroke-dasharray: 220;
		stroke-dashoffset: 0;
	}
}

@keyframes scaleBounce {
	from {
		transform: scale(0.7);
		opacity: 0;
	}
	to {
		transform: scale(1);
		opacity: 1;
	}
}

@keyframes arrive {
	0% {
		top: -500px;
		opacity: 0;
		box-shadow: $cell-inner-shadow;
	}
	30% {
		box-shadow: $cell-inner-shadow, 0 0 0 gray;
	}
	100% {
		top: 0;
		opacity: 1;
		box-shadow: $cell-inner-shadow, $cell-outer-shadow;
	}
}

@keyframes inbound {
	from {
		left: 100vw;
	}
}

@keyframes outbound {
	to {
		left: -200px;
	}
}
